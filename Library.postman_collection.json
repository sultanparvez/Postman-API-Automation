{
	"info": {
		"_postman_id": "6f35d815-a9ff-4cfd-a0d5-e2dd2c203ab2",
		"name": "Library",
		"description": "Get All Books of specfic user",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14997774"
	},
	"item": [
		{
			"name": "getAllBooks",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/Library/GetBook.php?AuthorName=p0wer",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "AuthorName",
							"value": "p0wer"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "AddBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Added book successfully\", function () {\r",
							"    try{\r",
							"         pm.response.to.have.status(200);\r",
							"    pm.expect(jsonData).to.have.property(\"Msg\");\r",
							"    pm.expect(jsonData.Msg).to.eql(\"successfully added\")\r",
							"    }\r",
							"    catch(err){\r",
							"        if(jsonData.Msg.includes(\"already\")){\r",
							"            console.log(\"Clean Up \")\r",
							"            cleanupscript();    \r",
							"        }\r",
							"    }\r",
							"   \r",
							"}); \r",
							"pm.collectionVariables.set(\"book_id\", jsonData[\"ID\"]);\r",
							"\r",
							"pm.test(\"Header validation\",function(){\r",
							" pm.response.to.have.header(\"Content-Type\");\r",
							"\r",
							" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json;charset=UTF-8\");\r",
							" pm.expect(pm.response.responseTime).to.be.below(1200);\r",
							"})\r",
							"pm.test(\"ID validation\",()=>{\r",
							"const isbn_value = pm.collectionVariables.get(\"isbn\");\r",
							"    const req =JSON.parse(pm.request.body.raw);\r",
							"    const aisle_value = req.aisle;\r",
							"    const expected_id = isbn_value+aisle_value;\r",
							"    console.log(expected_id)\r",
							"    pm.expect(expected_id).to.eql(jsonData.ID)\r",
							"})\r",
							"\r",
							"  function cleanupscript(){\r",
							"    const req =JSON.parse(pm.request.body.raw);\r",
							"    const expected_id = req.isbn+req.aisle;\r",
							"    pm.collectionVariables.set(\"book_id\", expected_id);\r",
							"    pm.collectionVariables.set(\"flag\",true)\r",
							"      postman.setNextRequest(\"deleteBook\")\r",
							"  }   \r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"var comCode = pm.globals.get(\"companyCode\");\r",
							"var time = pm.variables.replaceIn('{{$timestamp}}');\r",
							"pm.collectionVariables.set(\"isbn\", comCode+time);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"A brief history of p0wer\",\r\n    \"isbn\": \"{{isbn}}\",\r\n    \"aisle\": \"0068\",\r\n    \"author\":\"{{author}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/Addbook.php?isbn",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"Addbook.php"
					],
					"query": [
						{
							"key": "isbn",
							"value": null
						}
					]
				},
				"description": "Add book , or books (using iterator)"
			},
			"response": []
		},
		{
			"name": "getBookusingID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json()\r",
							"pm.test(\"Book is available\",()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"Validate response\",()=>{\r",
							"    pm.expect(jsonData[0].author).to.be.eql(pm.collectionVariables.get(\"author\"));\r",
							"\r",
							"})\r",
							"const schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"book_name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"isbn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"aisle\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"author\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"book_name\",\r",
							"        \"isbn\",\r",
							"        \"aisle\",\r",
							"        \"author\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"pm.test(\"Schema Validate\",()=>{\r",
							"\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/Library/GetBook.php?ID={{book_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "{{book_id}}"
						}
					]
				},
				"description": "Get the added book details"
			},
			"response": []
		},
		{
			"name": "deleteBook",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json()\r",
							"const schema ={\r",
							"\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"msg\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"msg\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"Deleted Book\",()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"    pm.expect(jsonData.msg).to.eql(\"book is successfully deleted\")\r",
							"})\r",
							"pm.test(\"Schema Validate\",()=>{\r",
							"\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							"\r",
							"// if (pm.collectionVariables.get(\"flag\")){\r",
							"//     console.log(pm.collectionVariables.get(\"flag\"))\r",
							"//     postman.setNextRequest(\"AddBook\")\r",
							"//     pm.collectionVariables.set(\"flag\",false)\r",
							"// }\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"ID\":\"{{book_id}}\" \r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/DeleteBook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"DeleteBook.php"
					]
				},
				"description": "Deleted the book"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "book_id",
			"value": ""
		},
		{
			"key": "author",
			"value": "p0wer",
			"type": "string"
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "isbn",
			"value": ""
		},
		{
			"key": "flag",
			"value": "false",
			"type": "string"
		}
	]
}